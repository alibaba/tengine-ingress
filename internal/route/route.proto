/*
Copyright 2022-2023 The Alibaba Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";
option go_package = "./;route";

package route;

message TagValueStrList {
    repeated string value = 1; // a list of strings  
}

enum OperatorType {
    OperatorUnDefined    = 0;
    OperatorEqual        = 1; // equal
    OperatorGreater      = 2; // greater than
    OperatorLess         = 3; // less than
    OperatorGreaterEqual = 4; // greater than or equal
    OperatorLessEqual    = 5; // less than or equal
}

enum LocationType {
    LocUnDefined  = 0;
    LocHttpHeader = 1; // HTTP header
    LocHttpQuery  = 2; // HTTP query 
    LocNginxVar   = 3; // Nginx var 
    LocXBizInfo   = 4; // x-biz-info 
    LocHttpCookie = 5; // HTTP cookie
}

message TagItemCondition {
    optional string value_str           = 1; // an exact string
    optional TagValueStrList value_list = 2; // a list of strings  
    optional uint64 divisor             = 3; // mode divisor for modulo operation
    optional uint64 remainder           = 4; // compare remainder for modulo operation
    optional OperatorType operator      = 5; // >, <, =, >=, <= for modulo operation
}

enum MatchType {
    MatchUnDefined = 0;
    WholeMatch     = 1; // match an exact string
    StrListInMatch = 2; // match a string with a list of strings
    ModCompare     = 3; // match the result of modulo operation
}

message TagItem {
    optional LocationType location      = 1; // location type
    optional string key                 = 2; // the key to be parsed
    optional TagItemCondition condition = 3; // the value to be parsed
    optional MatchType match_type       = 4; // match type
}

message TagRule {
    repeated TagItem items = 1; // AND
}

message TagRouter {
    optional string service_name = 1;
    repeated TagRule rules       = 2; // OR
}

message PathRouter {
    optional string prefix       = 1;
    optional string service_name = 2;
    repeated TagRouter tags      = 3;
}

enum HostType {
    Web  = 0; // web
    MTOP = 1; // mtop
}

message HostRouter {
    optional string host         = 1;
    optional string service_name = 2;
    repeated PathRouter paths    = 3;
    repeated TagRouter tags      = 4;
    optional HostType type       = 5;
}

message AppnameRouter {
    optional string appname      = 1;
    optional string service_name = 2;
    repeated TagRouter tags      = 3;
}

message APIRouter {
    optional string service_name = 1;
    optional string api          = 2;
    repeated TagRouter tags      = 3;
}

message Router {
    optional HostRouter host_router       = 1;
    optional AppnameRouter appname_router = 2;
    optional APIRouter api_router         = 3;
}

message Upstream {
    optional string target = 1;
    optional uint32 weight = 2;
}

message Timeout {
    optional uint32 connect_timeout = 1;
    optional uint32 read_timeout    = 2;
    optional uint32 write_timeout   = 3;
}

message Metadata {
    optional string key   = 1;
    optional string value = 2;
}

enum ActionType {
    ActionUnDefined        = 0;
    ActionAddReqHeader     = 1; // Add header to request, if the header is present on the request, the header and value will be added to the request again.
    ActionAppendReqHeader  = 2; // Append header value to request header, if the header is not present on the request, the header will be added to the request.
    ActionAddRespHeader    = 3; // Add header to response, if the header is present on the request, the header and value will be added to the response again.
    ActionAppendRespHeader = 4; // Append header value to response header, if the header is not present on the request, the header will be added to the response.
    ActionAddParam         = 5; // Add query to request, if the query is present on the request, the query and value will be added to the request again.
}

enum ActionValueType {
    ActionValueUnDefined = 0;
    ActionStaticValue    = 1; // get value from static config
    ActionDynamicValue   = 2; // get value from Nginx var
}

message Action {
    optional ActionType action_type     = 1;
    optional ActionValueType value_type = 2;
    optional string key                 = 3;
    optional string value               = 4;
}

message VirtualService {
    required string service_name = 1;
    repeated Upstream upstreams  = 2;
    optional Timeout timeout_ms  = 3;
    optional bool force_https    = 4;
    repeated Metadata metadata   = 5;
    repeated Action action       = 6;
}

message Config {
    repeated Router routers          = 1;
    repeated VirtualService services = 2;
}
