/*
Copyright 2022 The Alibaba Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto2";
option go_package = "./;route";

package route;

enum LocationType {
    LocHttpHeader = 0;
    LocHttpQuery = 1;
    LocNginxVar = 2;
    LocXBizInfo = 3;
}

enum MatchType {
    WholeMatch = 0;
    PrefixMatch = 1;
    SuffixMatch = 2;
    RegMatch = 3;
}

message TagItem {
    optional LocationType location = 1;
    optional string key = 2;
    optional string value = 3;
    optional MatchType match_type =4;
}

message TagRule {
    repeated TagItem items = 1;
}

message TagRouter {
    optional string service_name = 1;
    repeated TagRule rules = 2;
}

message Timeout {
    optional uint32 connect_timeout = 1;
    optional uint32 read_timeout = 2;
    optional uint32 write_timeout = 3;
}

message Upstream {
    optional string target = 1;
    optional uint32 weight = 2;
}

message Metadata
{
  optional string key = 1;
  optional string value = 2;
}

message VirtualService {
    required string service_name = 1;
    repeated Upstream upstreams = 2;
    optional Timeout timeout_ms = 3;
    optional bool force_https = 4;
    repeated Metadata metadata = 5;
}

message PathRouter {
    optional string path = 1;
    optional string service_name = 2;
    repeated TagRouter tags = 3;
}

message HostRouter {
    optional string host = 1;
    optional string service_name = 2;
	repeated PathRouter paths = 3;
    repeated TagRouter tags = 4;
}

message Router {
    optional HostRouter host_router = 1;
}

message Config {
    repeated Router routers = 1;
    repeated VirtualService services = 2;
}
